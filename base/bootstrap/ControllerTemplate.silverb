<?php

namespace App\Http\Controllers;

use App\Models\<$ this.model.getNameCapitalized() $>;
use Illuminate\Http\Request;
use App\Http\Requests\Store<$ this.model.getNameCapitalized() $>;
<# Model foreign keys #>
<% for (let relationship of this.model.belongsToRelationships) { %>
use App\Models\<$ relationship.relatedModel.getNameCapitalized() $>;
<% } %>
<% for (let relationship of this.model.hasManyRelationships) { %>
use App\Models\<$ relationship.relatedModel.getNameCapitalized() $>;
<% } %>
<# For each to get the belongsTo relationships inside hasMany relationships #>
<% for (let relationship of this.model.hasManyRelationships) { %>
<% if (relationship.element == "simple-datagrid") { %>
<% for (let subRelationship of relationship.relatedModel.belongsToRelationships) { %>
<# Test if the relationship has an element and the related model is different from the main model #>
<% if (subRelationship.element && (this.model.getNameCapitalized() != subRelationship.relatedModel.getNameCapitalized())) { %>
use App\Models\<$ subRelationship.relatedModel.getNameCapitalized() $>;
<% } %>
<% } %>
<% } %>
<% } %>

class <$ this.model.getNameCapitalized() $>Controller extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $search = $request->get('search', '');
        $<$ this.model.getNamePlural() $> = <$ this.model.getNameCapitalized() $>::search($search)->paginate(10);

        return view('home.<$ this.model.getNamePlural() $>.index')
            ->with('<$ this.model.getNamePlural() $>', $<$ this.model.getNamePlural() $>)
            ->with('search', $search);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        <# Model foreign keys #>
        <% for (let relationship of this.model.belongsToRelationships) { %>
        $<$ relationship.relatedModel.getNamePlural() $> = <$ relationship.relatedModel.getNameCapitalized() $>::pluck('<$ relationship.getDisplayField() $>', 'id');
        <% } %>
        <# For each to get the belongsTo relationships inside hasMany relationships #>
        <% for (let relationship of this.model.hasManyRelationships) { %>
        <% if (relationship.element == "simple-datagrid") { %>
        <% for (let subRelationship of relationship.relatedModel.belongsToRelationships) { %>
        <% if (subRelationship.element) { %>
        $<$ subRelationship.relatedModel.getNamePlural() $> = <$ subRelationship.relatedModel.getNameCapitalized() $>::select('id', '<$ subRelationship.getDisplayField() $>')->get();
        <% } %>
        <% } %>
        <% } %>
        <% } %>

        <# Return the views #>
        return view('home.<$ this.model.getNamePlural() $>.create')
        <% for (let relationship of this.model.hasManyRelationships) { %>
        <% if (relationship.element == "simple-datagrid") { %>
        <% for (let subRelationship of relationship.relatedModel.belongsToRelationships) { %>
        <% if (subRelationship.element) { %>
            ->with('<$ subRelationship.relatedModel.getNamePlural() $>', $<$ subRelationship.relatedModel.getNamePlural() $>)
        <% } %>
        <% } %>
        <% } %>
        <% } %>
        <% for (let relationship of this.model.belongsToRelationships) { %>
            ->with('<$ relationship.relatedModel.getNamePlural() $>', $<$ relationship.relatedModel.getNamePlural() $>)
        <% } %>;
    }
    
    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Store<$ this.model.getNameCapitalized() $> $request)
    {
        $data = $request->all();

        $<$ this.model.getName() $> = <$ this.model.getNameCapitalized() $>::create($data);

        <% for (let relationship of this.model.hasManyRelationships) { %>
        <% if (relationship.element == "simple-datagrid") { %>
        $<$ relationship.getAliasPlural() $> = collect($request-><$ relationship.getAliasPlural() $>)->transform(function($<$ relationship.getAlias() $>) {
            return new <$ relationship.relatedModel.getNameCapitalized() $>($<$ relationship.getAlias() $>);
        });

        $<$ this.model.getName() $>-><$ relationship.getAliasPlural() $>()->delete();
        $<$ this.model.getName() $>-><$ relationship.getAliasPlural() $>()->saveMany($<$ relationship.getAliasPlural() $>);
        
        <% } %>
        <% } %>

        return redirect()->route('home.<$ this.model.getNamePlural() $>.edit', $<$ this.model.getName() $>->id)
            ->withSuccess('Saved successfuly!');
    }

    /**
     * Display the specified resource.
     *
     * @param  \App\Models\<$ this.model.getNameCapitalized() $>  <$ this.model.getName() $>
     * @return \Illuminate\Http\Response
     */
    public function show(<$ this.model.getNameCapitalized() $> $<$ this.model.getName() $>)
    {
        return view('home.<$ this.model.getNamePlural() $>.show')->with('<$ this.model.getName() $>', $<$ this.model.getName() $>);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \App\Models\<$ this.model.getNameCapitalized() $>  <$ this.model.getName() $>
     * @return \Illuminate\Http\Response
     */
    public function edit(<$ this.model.getNameCapitalized() $> $<$ this.model.getName() $>)
    {
        <# Model foreign keys #>
        <% for (let relationship of this.model.belongsToRelationships) { %>
        $<$ relationship.relatedModel.getNamePlural() $> = <$ relationship.relatedModel.getNameCapitalized() $>::pluck('<$ relationship.getDisplayField() $>', 'id');
        <% } %>
        <# For each to get the belongsTo relationships inside hasMany relationships #>
        <% for (let relationship of this.model.hasManyRelationships) { %>
        <% if (relationship.element == "simple-datagrid") { %>
        <% for (let subRelationship of relationship.relatedModel.belongsToRelationships) { %>
        <% if (subRelationship.element) { %>
        $<$ subRelationship.relatedModel.getNamePlural() $> = <$ subRelationship.relatedModel.getNameCapitalized() $>::select('id', '<$ subRelationship.getDisplayField() $>')->get();
        <% } %>
        <% } %>
        <% } %>
        <% } %>

        <# Return the views #>
        return view('home.<$ this.model.getNamePlural() $>.edit')->with('<$ this.model.getName() $>', $<$ this.model.getName() $>)
        <% for (let relationship of this.model.hasManyRelationships) { %>
        <% if (relationship.element == "simple-datagrid") { %>
        <% for (let subRelationship of relationship.relatedModel.belongsToRelationships) { %>
        <% if (subRelationship.element) { %>
            ->with('<$ subRelationship.relatedModel.getNamePlural() $>', $<$ subRelationship.relatedModel.getNamePlural() $>)
        <% } %>
        <% } %>
        <% } %>
        <% } %>
        <% for (let relationship of this.model.belongsToRelationships) { %>
            ->with('<$ relationship.relatedModel.getNamePlural() $>', $<$ relationship.relatedModel.getNamePlural() $>)
        <% } %>;
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\<$ this.model.getNameCapitalized() $>  <$ this.model.getName() $>
     * @return \Illuminate\Http\Response
     */
    public function update(Store<$ this.model.getNameCapitalized() $> $request, <$ this.model.getNameCapitalized() $> $<$ this.model.getName() $>)
    {
        $data = $request->all();
        $<$ this.model.getName() $>->update($data);

        <% for (let relationship of this.model.hasManyRelationships) { %>
        <% if (relationship.element == "simple-datagrid") { %>
        $<$ relationship.getAliasPlural() $> = collect($request-><$ relationship.getAliasPlural() $>)->transform(function($<$ relationship.getAlias() $>) {
            return new <$ relationship.relatedModel.getNameCapitalized() $>($<$ relationship.getAlias() $>);
        });

        $<$ this.model.getName() $>-><$ relationship.getAliasPlural() $>()->delete();
        $<$ this.model.getName() $>-><$ relationship.getAliasPlural() $>()->saveMany($<$ relationship.getAliasPlural() $>);

        <% } %>
        <% } %>

        return redirect()->route('home.<$ this.model.getNamePlural() $>.edit', $<$ this.model.getName() $>->id)
            ->withSuccess('Saved successfuly!');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\<$ this.model.getNameCapitalized() $>  <$ this.model.getName() $>
     * @return \Illuminate\Http\Response
     */
    public function destroy(<$ this.model.getNameCapitalized() $> $<$ this.model.getName() $>)
    {
        <# Deleting Has Many Relationships #>
        $<$ this.model.getName() $>->delete();
        return redirect()->route('home.<$ this.model.getNamePlural() $>.index');
    }
}
