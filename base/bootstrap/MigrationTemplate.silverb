<?php

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class Create<$ this.model.getNamePluralCapitalized() $>Table extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('<$ this.model.getNamePluralSnakeCase() $>', function (Blueprint $table) {
            $table->increments('id');
            <# Model fields #>
            <% for (let field of this.model.fields) { %>
            <# String, File or Image Field #>
            <% if (field.type == "string" || field.type == "file" || field.type == "image") { %>
            $table->string('<$ field.getName() $>'
            <up if (field.size) { up>
            ,<$ field.size $>
            <up } up>)
            <up if (field.hasDefault) { up>
            ->default('<$ field.default $>')
            <up } up>
            <up if(!field.required) { up>
            ->nullable()
            <up } up>;
            <# Enum Field #>
            <% } else if (field.type == "enum") { %>
            $table->enum('<$ field.getName() $>',[
            <up for (let item of field.items) { up>
            '<$ item.value $>',
            <up } up>
            ])
            <up if (field.hasDefault) { up>
            ->default('<$ field.default $>')
            <up } up>
            <up if(!field.required) { up>
            ->nullable()
            <up } up>;
            <# Boolean Field #>
            <% } else if (field.type == "boolean") { %>
            $table->boolean('<$ field.getName() $>')
            <up if (field.hasDefault) { up>
            ->default('<$ field.default $>')
            <up } up>
            <up if(!field.required) { up>
            ->nullable()
            <up } up>;
            <# Other Fields #>
            <% } else { %>
            $table-><$ field.getType() $>('<$ field.getName() $>'
            <up if (field.size) { up>
            ,<$ field.size $>
            <up } up>)
            <up if (field.hasDefault) { up>
            ->default('<$ field.default $>')
            <up } up>
            <up if(!field.required) { up>
            ->nullable()
            <up } up>;
            <% } %>
            <% } %>
            
            <# Model foreign keys #>
            <% if(this.model.belongsToRelationships.length > 0) { %>
            <% for (let relationship of this.model.belongsToRelationships) { %>
            $table->unsignedInteger('<$ relationship.foreignKeyName $>');
            $table->foreign('<$ relationship.foreignKeyName $>')->references('id')->on('<$ relationship.relatedModel.namePlural $>')->onDelete('cascade')
            <up if (!relationship.required) { up>
            ->nullable()
            <up } up>;
            <% } %>
            <% } else { %>
            <% this.removeLastBreakLine(); %>
            <% } %>

            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('<$ this.model.getNamePluralSnakeCase() $>');
    }
}