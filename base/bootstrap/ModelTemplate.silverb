<?php

namespace App\Models;

use KingOfCode\Upload\Uploadable;
use Illuminate\Database\Eloquent\Model;
use Nicolaslopezj\Searchable\SearchableTrait;

class <$ this.model.getNameCapitalized() $> extends Model
{
    use SearchableTrait, Uploadable;

    protected $fillable = [
        <# Model fields #>
        <% for (let field of this.model.fields) { %>
        <% if (!field.isFileField()) { %>
        '<$ field.name $>',
        <% } %>
        <% } %>
        <# Model foreign keys #>
        <% if(this.model.belongsToRelationships.length > 0) { %>
        <% for (let relationship of this.model.belongsToRelationships) { %>
        '<$ relationship.foreignKeyName $>',
        <% } %>
        <% } else { %>
        <% this.removeLastBreakLine(); %>
        <% } %>
    ];

    protected $dates = [
        <# Model fields #>
        <% for (let field of this.model.fields) { %>
        <% if (field.type == "date" || field.type == "datetime" || field.type == "timestamp") { %>
        '<$ field.name $>',
        <% } %>
        <% } %>
        'created_at',
        'updated_at',
    ];

    protected $casts = [
        <# Model fields #>
        <% for (let field of this.model.fields) { %>
        <% if (field.type == "boolean") { %>
        '<$ field.name $>' => 'boolean',
        <% } %>
        <% } %>
    ];

    protected $searchable = [
        'columns' => [
            <# Model searchable fields #>
            <% for (let field of this.model.fields) { %>
            <% if (field.isSearchable()) { %>
            '<$ this.model.getNamePlural() $>.<$ field.name $>' => 10,
            <% } %>
            <% } %>
        ]
    ];

    protected $uploadableImages = [
        <# Image fields #>
        <% for (let field of this.model.fields) { %>
        <% if (field.type == "image") { %>
        '<$ field.name $>',
        <% } %>
        <% } %>
    ];

    protected $uploadableFiles = [
        <# File fields #>
        <% for (let field of this.model.fields) { %>
        <% if (field.type == "file") { %>
        '<$ field.name $>',
        <% } %>
        <% } %>
    ];

    <# Belongs To Relationships #>
    <% for (let relationship of this.model.belongsToRelationships) { %>
    public function <$ relationship.getAlias() $>() 
    {
        return $this->belongsTo(<$ relationship.relatedModel.getNameCapitalized() $>::class<% if (relationship.hasDifferentForeignKeyName()) { %>, '<$ relationship.foreignKeyName $>'<% } %>);
    }

    <% } %>
    <# Belongs To Many Relationships #>
    <% for (let relationship of this.model.belongsToManyRelationships) { %>
    public function <$ relationship.getAliasPlural() $>() 
    {
        return $this->belongsToMany(<$ relationship.relatedModel.getNameCapitalized() $>::class);
    }

    <% } %>
    <# Has One Relationships #>
    <% for (let relationship of this.model.hasOneRelationships) { %>
    public function <$ relationship.getAlias() $>() 
    {
        return $this->hasOne(<$ relationship.relatedModel.getNameCapitalized() $>::class<% if (relationship.hasDifferentForeignKeyName()) { %>, '<$ relationship.foreignKeyName $>'<% } %>);
    }

    <% } %>
    <# Has Many Relationships #>
    <% for (let relationship of this.model.hasManyRelationships) { %>
    public function <$ relationship.getAliasPlural() $>() 
    {
        return $this->hasMany(<$ relationship.relatedModel.getNameCapitalized() $>::class<% if (relationship.hasDifferentForeignKeyName()) { %>, '<$ relationship.foreignKeyName $>'<% } %>);
    }

    <% } %>
    <# Deleting Has Many Relationships #>
    <% for (let relationship of this.model.hasManyRelationships) { %>
    public function delete<$ relationship.getAliasPluralCapitalized() $>() 
    {
        foreach ($this-><$ relationship.getAliasPlural() $> as $<$ relationship.getAlias() $>) {
            $<$ relationship.getAlias() $>->delete();
        }
    }

    <% } %>

}